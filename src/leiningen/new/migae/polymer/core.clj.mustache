(ns {{ns.sym}}
  (:require
{{#clojure}}
	[clojure.pprint :as pp]
	[clojure.tools.logging :as log :refer [debug info]]
{{/clojure}}
{{#compojure}}
	[compojure.coercions :as coerc :refer [as-int as-uuid]]
	[compojure.core :refer :all]
	[compojure.handler :as handler :refer [api site]]
	[compojure.route :as route :refer [files resources]]
{{/compojure}}
{{#ring}}
	;; TODO: split out ring.middleware, ring.util, etc.???
	 [ring.handler.dump :refer [handle-dump]] ; ring-devel
	 [ring.middleware.keyword-params :refer [wrap-keyword-params]] ; ring-core
	 [ring.middleware.params :refer [wrap-params]] ; ring-core
         [ring.middleware.resource :refer [wrap-resource]]
	 ;; [ring.middleware.nested-params :refer [wrap-nested-params]] ; ring-core
	 [ring.middleware.defaults :refer :all] ; ring-defaults
	 [ring.util.response :as r]
{{/ring}}
{{#ringx}}
	 [ringx.util.http-response :refer :all]
{{/ringx}}
{{#hiccup}}
	 [hiccup.core :refer [h html]]
	 [hiccup.def :refer [defelem defhtml wrap-attrs]]
	 [hiccup.element :refer [image javascript-tag link-to mail-to ordered-list unordered-list]]
	 [hiccup.form :refer [*group* check-box drop-down email-field
	 	      	      file-upload form-to hidden-field label
			      password-field radio-button reset-button
			      select-options submit-button text-area text-field
			      with-group]]
	 [hiccup.middleware :refer [wrap-base-url]]
	 [hiccup.page :refer [doctype html4 html5
	 	      	      include-css include-js
			      xhtml xhtml-tag xml-declaration]]
	 [hiccup.util :refer [*base-url* *encoding* *html-mode*
	 	      	      as-str escape-html ToString ToURI
			      url URLEncode with-base-url with-encoding]]
{{/hiccup}}
    ))

{{#polymer}}
(defn- configure-jsvm
  [title & opts]
  [:head
    [:title title]
    [:meta {:charset "utf-8"}]
    [:meta {:name "viewport",
            :content
            "width=device-width, minimum-scale=1.0, initial-scale=1, user-scalable=yes"}]
    [:meta {:name "mobile-web-app-capable", :content "yes"}]
    [:meta {:name "apple-mobile-web-app-capable", :content "yes"}]
    [:script {:src "polymer/webcomponentsjs/webcomponents-lite.js"}]
    [:link {:rel "import", :href "polymer/paper-button/paper-button.html"}]
    [:link {:rel "import", :href "polymer/paper-material/paper-material.html"}]
    ]
  )
{{/polymer}}

(defroutes {{project}}-routes
  (GET "/" []
    (println "{{project}}-routes")
{{#hiccup}}
    (html5
{{/hiccup}}
{{#polymer}}
      (configure-jsvm "polymer demo")
{{/polymer}}
{{#hiccup}}
      [:body
       [:h1 "Hello World"]
{{/hiccup}}
{{#polymer}}
       [:paper-material "I am a polymer paper-material component!"]
       [:paper-button {:raised true} "Click me - I am a raised polymer button component!"]
{{/polymer}}
{{#hiccup}}
       ]))
{{/hiccup}}
{{#raw}}
   "Hello World"
{{/raw}}

  (route/not-found "Not Found"))

(def app
  (-> {{project}}-routes
    (wrap-resource "/")
    (wrap-defaults site-defaults)))
